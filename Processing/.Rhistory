ls()
names(prosimian.raw)
prosimian.list
prosimian.list
q()
n
ls()
ls()
save.image()
q()
n
names(prosimian.raw)
head(prosimian.raw [[1]])
head(prosimian.raw [[2]])
head(prosimian.raw [[1]] [[1]])
prosimian.raw [[1]] [[2]] [, , 1, 1]
homo.test [[2]] [, , , 1]
homo.test [[2]] [, , , 1]
prosimian.raw [[1]] [[1]]
prosimian.raw [[1]] [[2]] [, , 1, ]
prosimian.raw [[1]] [[2]] [, , , 1]
prosimian.raw [[1]] [[2]] [, , 1:2, 1]
prosimian.raw [[1]] [[2]] [, , 1:2, 1:2]
prosimian.raw [[1]] [[1]]
det(R)
?svd
UDV
det(M)
eigen(M)
det(M)
homo.test
procOPA
prosimian.list
grep('Correção', prosimian.list)
grep('Correção', prosimian.list)
prosimian.list[grep('Correção', prosimian.list)]
prosimian.list[grep('Correção', prosimian.list)]
prosimian.list %in% names(prosimian.raw)
names(prosimian.raw)
prosimian.list %in% names(prosimian.raw)
prosimian.list[which(!prosimian.list %in% names(prosimian.raw))]
prosimian.list %in% names(prosimian.raw)
prosimian.list[grep('Correção', prosimian.list)]
names(prosimian.raw)[grep('AMNH_NewYork/Madagascar/', names(prosimian.raw)]
names(prosimian.raw)[grep('AMNH_NewYork/Madagascar/', names(prosimian.raw))]
prosimian.list[grep('AMNH_NewYork/Madagascar/', prosimian.list)]
getwd()
q()
n
require(rgl)
install.packages('rgl', dependencies=TRUE)
save.image()
q()
n
ls()
rm(list = ls())
str(prosimian.cleanup)
dimnames(prosimian.cleanup $ coord) [[4]]
str(anthropoids)
prosimians $ id $ Ind
str(anthropoids)
q()
y
?stanfit
?stan
?stan
?stan
?stan
?stan
RandomMatrix
str(sag.test)
save.image()
table(primates $ info $ GSP)
subset(primates $ info, GSP == 'Microcebus_murinus')
sag.df
sag.df
str(sag.test [[1]])
names(sag.test [[1]])
names(sag.test)
sag.test $ lp__
sag.test [1834]
sag.lp
names(primates)
rm(primates)
names(prima.lory)
ls() 
Aux $ data.man.sp
warnings()
names(Aux)
Aux $ landmarks
Aux $ tessel.38
Aux $ single.tessel.38
dist(prima.sym $ coord [, , 1], T, T)
prima.sym $ coord [, , 1]
dist(prima.sym $ coord [, , 1], diag = TRUE, upper = TRUE)
dist(prima.sym $ coord [, , 1], diag = TRUE, upper = TRUE)[Aux $ single.tessel.38]
dist(prima.sym $ coord [, , 1], diag = TRUE, upper = TRUE)[Aux $ single.tessel.38 [, 1], Aux $ single.tessel.38 [, 2]]
dimnames(prima.lory $ local)
dim(prima.sym $ coord)
ls()
dimnames(anthropoids $ coord)
dimnames(anthropoids $ coord) [[1]]
anthro.order
rownames(Aux $ def.hyp [[1]])
rownames(Aux $ def.hyp)
names(prima.raw)
LORY
save.image()
R_dgebal
LORY
str(pirma.lory)
str(prima.lory)
save.image()
q()
n
PmatrixPosterior
?stan
names(prima.lory)
load('Primates/LORY.RData')
names(prima.lory)
save.image()
load('Primates/Info.RData')
head(prima.info)
save.image()
dim(prima.lory $ local)
dim(prima.info)
save.image()
Aux $ data.man.sp
Aux $ data.man.sp
save.image()
ls()
q()
n
ls()
rm(list = ls())
table(prima.info $ GSP)
cur.df
table(prima.aux $ models $ MOD)
dimnames(none.Pmat)
dim(sex.Pmat)
dim(sex.Pmat)
q()
y
ls()
str(sex.Pmat)
prima.aux $ models $ GSP [prima.aux $ models $ MOD == 'SEX'] [20]
save.image()
str(sex.Pmat.arr)
)
str(other.Pmat)
cur.df
save.image()
str(other.Pmat)
dimnames(other.Pmat)
dim(sex.Pmat)
dim(none.Pmat)
dim(other.Pmat)
colnames(prima.lory $ local)
dimnames(post.Pmat)
dimnames(prima.lory $ post.Pmat)
dim(prima.lory $ post.ml.rs)
colnames(post.ml.df)
prima.aux $ models
?gather
head(post.ml.df)
head(post.ml.df)
head(post.ml.df)
?gather
head(post.ml.df)
prima.aux $ models
dim(prima.sym$gpa$tan)
?procGPA
ls()
names(prima.aux)
save.image()
warnings()
PmatrixPosterior
prima.info $ models
prima.aux $ models
save.image()
warnings()
cur.sp
q()
y
ls
ls()
eigen(sex.Pmat [1, , ]) $ values
dim(sex.Pmat)
eigen(sex.Pmat [1, 1, , ]) $ values
dim(ml.Pmat)
colnames(prima.ed $ raw)
head(post.ml.df)
subset(post.ml.df, id == 'Saguinus_mystax')
subset(post.ml.df, id == 'Saguinus_midas')
prima.aux $ models
dim(cur.Pmat)
q()
y
?match
allo.data $ models [, 1:2]
allo.tree $ models
